#!/usr/bin/env python3
import math
import numpy as np
import matplotlib.pyplot as plt
import csv
from shapely.geometry import Point, Polygon
from shapely.geometry.polygon import LinearRing, Polygon
from shapely.geometry  import MultiPoint
import tkinter as tk
from tkinter import*
import tkinter.filedialog
from tkinter.filedialog import askopenfilename
import tkinter.messagebox
import os
from sys import exit
import xlwt
from PIL import Image
import datetime

root = Tk()
root.title('OBN SURVEY DESIGN')

def NewFile():
    name  = asksaveasfilename()
    print (name)
def OpenFile():
    filename = askopenfilename()
    fp = open(filename)
def About():
    print ("Version 1.50 = Marcos Guimaraes")
menu = Menu(root)
root.config(menu=menu)
filemenu = Menu(menu)
menu.add_cascade(label="File",font=("Sans Bold", 10), menu=filemenu)
filemenu.add_command(label="Spreadsheet file", command=NewFile)
filemenu.add_command(label="Node polygon file", command=OpenFile)
filemenu.add_command(label="Shot polygon file", command=OpenFile)
filemenu.add_command(label="EXIT", command=root.quit)
helpmenu = Menu(menu)
menu.add_cascade(label="Help",font=("Sans Bold", 10), menu=helpmenu)
helpmenu.add_command(label="About", command=About)

photo = PhotoImage(file='geomagg3.png')
photo = photo.subsample(1)
photo_label = Label(root, image=photo)
photo_label.image = photo 
photo_label.grid()

Label(root, text='Design 1.5  ',font=("Sans Bold", 10)).grid(row=0,column=5,sticky=NE)
Frame(root, bg="black",width=3, height=3)

fp = open("polipar1", 'r')
par1,par2=[],[]
reader = csv.reader(fp, delimiter=' ')
for row in reader:
    par1.append(row[0])
    par2.append(row[1])
fp.close()

Label(root, text="--------------------------------------------------").grid(row=2, column=5,sticky=E)
Label(root, text="  Nodes Grid Computation  ",font=("Sans Bold", 12),width=20).grid(row=2, column=4)
Label(root, text="--------------------------------------------------").grid(row=2, column=5, sticky=E)
Label(root, text="       ").grid(row=3, column=3, sticky=E)

Label(root, text="Nodes space X (m):      ",font=("Sans Bold", 9)).grid(row=3, column=3,sticky='w')
nodex = DoubleVar()
Entry(root, width=8, textvariable=nodex,font=("Sans Bold", 9)).grid(row=3, column=3,sticky='e')
nodex.set(par1[0])

Label(root, text="Nodes space Y (m): ",font=("Sans Bold", 9)).grid(row=3, column=5,sticky='w')
nodey = DoubleVar()
Entry(root, width=8, textvariable=nodey,font=("Sans Bold", 9)).grid(row=3, column=5,sticky='e')
nodey.set(par2[0])

Label(root, text="Node grid origx ",font=("Sans Bold", 9)).grid(row=4, column=3,sticky='w')
origx = DoubleVar()
Entry(root, width=8, textvariable=origx,font=("Sans Bold", 9)).grid(row=4, column=3,sticky='e')
origx.set(par1[1])

Label(root, text="Node grid origy: ",font=("Sans Bold", 9)).grid(row=4, column=5,sticky='w')
origy = DoubleVar()
Entry(root, width=8, textvariable=origy,font=("Sans Bold", 9)).grid(row=4, column=5,sticky='e')
origy.set(par2[1])

Label(root, text="Node angle, X-direction (Deg): ",font=("Sans Bold", 9)).grid(row=5, column=3,sticky='w')
anglex = DoubleVar()
Entry(root, width=8, textvariable=anglex,font=("Sans Bold", 9)).grid(row=5, column=3,sticky='e')
anglex.set(par1[2])

Label(root, text="Range X (m): ",font=("Sans Bold", 9)).grid(row=6, column=3,sticky='w')
rngx = DoubleVar()
Entry(root, width=8, textvariable=rngx,font=("Sans Bold", 9)).grid(row=6, column=3,sticky='e')
rngx.set(par1[3])

Label(root, text="Range Y (m): ",font=("Sans Bold", 9)).grid(row=6, column=5,sticky='w')
rngy = DoubleVar()
Entry(root, width=8, textvariable=rngy,font=("Sans Bold", 9)).grid(row=6, column=5 ,sticky='e')
rngy.set(par2[3])

#---------------------------------------------------------------

Label(root, text="       ").grid(row=7, column=3, sticky=E)

v = IntVar()
v.set(par2[11])
languages = [
    ("Hexagonal"),
    ("Alternate"),
    ("Rectangular"),
]
def ShowChoice():
    print(v.get())
Label(root, text="""Grid options""",font=("Sans Bold", 10),fg = 'red',
         padx = 20).grid(row =9, column=3,sticky=W)
for val, language in enumerate(languages):
            Radiobutton(root, 
                  text=language,
                  padx = 40, 
                  variable=v, 
                  command=ShowChoice,
                  value=val,font=("Sans Bold", 9),fg = 'blue').grid(row =10+val, column=3,sticky=W)
#--------------------------------------------------------------
ort = IntVar()
ort.set(0)  
languages = [
    ("Parallel"),
    ("Orthogonal"),
]
def ShowChoice():
    print(ort.get())
Label(root, text="""Survey mode""",font=("Sans Bold", 10), fg = 'red',padx = 20).grid(row =9, column=5,sticky=W)
for val, language in enumerate(languages):
    Radiobutton(root, 
                  text=language,
                  padx = 20, 
                  variable=ort, 
                  command=ShowChoice,
                  value=val,font=("Sans Bold", 9),fg = 'blue').grid(row =10+val, column=5,sticky=W)

#----------------------------------------------------------

Label(root, text="       ").grid(row=11, column=3, sticky=E)

Label(root, text="--------------------------------------------------------").grid(row=14, column=3, sticky=E)
Label(root, text="  Shots  Grid computation   ",font=("Sans Bold", 12)).grid(row=14, column=4)
Label(root, text="--------------------------------------------------------").grid(row=14, column=5, sticky=E)

Label(root, text="       ").grid(row=14, column=3, sticky=E)

Label(root, text="Pop space (m):      ",font=("Sans Bold", 9)).grid(row=17, column=3,sticky='w')
shotx = DoubleVar()
Entry(root, width=8, textvariable=shotx,font=("Sans Bold", 9)).grid(row=17, column=3,sticky='e')
shotx.set(par1[4])

Label(root, text="  Number of Sources",font=("Sans Bold", 9)).grid(row=17, column=4,sticky='w')
Nsources = DoubleVar()
Entry(root, width=8, textvariable=Nsources,font=("Sans Bold", 9)).grid(row=17, column=4,sticky='e')
Nsources.set(par1[11])

Label(root, text="  Array separation Y- direction (m): ",font=("Sans Bold", 9)).grid(row=17, column=5,sticky='w')
shoty = DoubleVar()
Entry(root, width=8, textvariable=shoty,font=("Sans Bold", 9)).grid(row=17, column=5,sticky='e')
shoty.set(par2[4])

Label(root, text="Shot grid origx: ",font=("Sans Bold", 9)).grid(row=18, column=3,sticky='w')
origxa = DoubleVar()
Entry(root, width=8, textvariable=origxa,font=("Sans Bold", 9)).grid(row=18, column=3,sticky='e')
origxa.set(par1[5])

#Label(root, text="  Vessel speed (knt): ",font=("Sans Bold", 9)).grid(row=18, column=4,sticky='w')
#BoatSpeed = DoubleVar()
#Entry(root, width=6, textvariable=BoatSpeed,font=("Sans Bold", 9)).grid(row=18, column=4,sticky='e')
#BoatSpeed.set(4.)

#Label(root, text="  Desired Record length (s): ",font=("Sans Bold", 9)).grid(row=19, column=4,sticky='w')
#DesiredRecordLength = DoubleVar()
#Entry(root, width=6, textvariable=DesiredRecordLength,font=("Sans Bold", 9)).grid(row=19, column=4,sticky='e')
#DesiredRecordLength.set(10.)


Label(root, text="  Shot grid origy: ",font=("Sans Bold", 9)).grid(row=18, column=5,sticky='w')
origya = DoubleVar()
Entry(root, width=8, textvariable=origya,font=("Sans Bold", 9)).grid(row=18, column=5,sticky='e')
origya.set(par2[5])

Label(root, text="  Shot angle,  X-direction (Deg): ",font=("Sans Bold", 9)).grid(row=19, column=3,sticky='w')
anglexa = DoubleVar()
Entry(root, width=8, textvariable=anglexa,font=("Sans Bold", 9)).grid(row=19, column=3,sticky='e')
anglexa.set(par1[6])

Label(root, text="  Shot grid range x (m): ",font=("Sans Bold", 9)).grid(row=20, column=3,sticky='w')
rngxa = DoubleVar()
Entry(root, width=8, textvariable=rngxa,font=("Sans Bold", 9)).grid(row=20, column=3,sticky='e')
rngxa.set(par1[7])

Label(root, text="  Shot grid range y (m): ",font=("Sans Bold", 9)).grid(row=20, column=5,sticky='w')
rngya = DoubleVar()
Entry(root, width=8, textvariable=rngya,font=("Sans Bold", 9)).grid(row=20, column=5,sticky='e')
rngya.set(par2[7])


Label(root, text="  Shot polygon halo (m): ",font=("Sans Bold", 9)).grid(row=19, column=5,sticky='w')
halo = DoubleVar()
Entry(root, width=8, textvariable=halo,font=("Sans Bold", 9)).grid(row=19, column=5,sticky='e')
halo.set(par2[6])

#-----------------------------------------------------------------
Label(root, text="       ").grid(row=24, column=3, sticky=E)

v1 = IntVar()
v1.set(0)  
lname = "Hexagonal Shooting"

def ShowChoice():
    print(v1.get())
Label(root, text="""Grid options""",font=("Sans Bold", 10),fg = 'red',
    padx = 20).grid(row =25, column=3, sticky=W)
Radiobutton(root,text=lname,padx = 20,variable=v1, 
    command=ShowChoice,value=1,font=("Sans Bold", 9),fg = 'blue').grid(row =26, column=3, sticky=W)
#------------------------------------------------------------------

ort1 = IntVar()
ort1.set(0)  
languages = [
    ("Parallel"),
    ("Orthogonal"),
]
def ShowChoice():
    print(ort1.get())
Label(root, text="""Survey mode""",font=("Sans Bold", 10),fg = 'red',
         padx = 20).grid(row =25, column=5,sticky=W)
for val, language in enumerate(languages):
    Radiobutton(root, 
                  text=language,
                  padx = 20, 
                  variable=ort1, 
                  command=ShowChoice,
                  value=val,font=("Sans Bold", 9),fg = 'blue').grid(row =26+val, column=5,sticky=W)


Label(root, text="       ").grid(row=24, column=3, sticky=E)
root1 = Frame(root)
tkvar = StringVar(root1)
 # Dictionary with options
choices = { 'ProvidedPolygon','CaioExpansion','CaioExpRounded'}
tkvar.set('ProvidedPolygon') # set the default option 

popupMenu = OptionMenu(root, tkvar, *choices)
popupMenu.config(font=('Impact',9))

menu = popupMenu.nametowidget(popupMenu.menuname)
menu.configure(font=('Impact', 9))

Label(root, text="Polygon expansion method",font=("Sans Bold", 8)).grid(row = 26, column = 4)
popupMenu.grid(row = 27, column=4)
# on change dropdown value
def change_dropdown(*args):
    print( tkvar.get() )
# link function to change dropdown
tkvar.trace('w', change_dropdown)

#----------------------------------------------------------------------------------------------------------------

Label(root, text="       ").grid(row=28, column=3, sticky=E)

Label(root, text="---------------------------------------------------------").grid(row=29, column=3, sticky=E)
Label(root, text="  Survey  parameters ",font=("Sans Bold", 12)).grid(row=29, column=4)
Label(root, text="---------------------------------------------------------").grid(row=29, column=5, sticky=E)

Label(root, text="       ").grid(row=30, column=3, sticky=E)

Label(root, text="SV vessel speed (knots): ",font=("Sans Bold", 9)).grid(row=31, column=3,sticky='w')
velshot = DoubleVar()
Entry(root, width=8, textvariable=velshot,font=("Sans Bold", 9)).grid(row=31, column=3,sticky='e')
velshot.set("4.6")

Label(root, text="Node vessel speed (knots): ",font=("Sans Bold", 9)).grid(row=31, column=5,sticky='w')
velnode = DoubleVar()
Entry(root, width=8, textvariable=velnode,font=("Sans Bold", 9)).grid(row=31, column=5,sticky='e')
velnode.set("1.")

Label(root, text="SV line chg avg time (Hr) : ",font=("Sans Bold", 9)).grid(row=32, column=3,sticky='w')
chglinetime = DoubleVar()
Entry(root, width=8, textvariable=chglinetime,font=("Sans Bold", 9)).grid(row=32, column=3,sticky='e')
chglinetime.set(".5")


Label(root, text="Maximum offset (m): ",font=("Sans Bold", 9)).grid(row=32, column=5,sticky='w')
MaxOff = DoubleVar()
Entry(root, width=8, textvariable=MaxOff,font=("Sans Bold", 9)).grid(row=32, column=5,sticky='e')
MaxOff.set(8000)

Label(root, text="Node Lines deployed before shooting : ",font=("Sans Bold", 9)).grid(row=33, column=3,sticky='w')
PreNodeLines = DoubleVar()
Entry(root, width=8, textvariable=PreNodeLines,font=("Sans Bold", 9)).grid(row=33, column=3,sticky='e')
PreNodeLines.set("2")

Label(root, text="ESPG : ",font=("Sans Bold", 9)).grid(row=33, column=5,sticky='w')
espg = StringVar()
Entry(root, width=10, textvariable=espg,font=("Sans Bold", 9)).grid(row=33, column=5,sticky='e')
espg.set(par2[9])

Label(root, text="PROJECT NAME : ",font=("Sans Bold", 9)).grid(row=34, column=3,sticky=W)
ProjName = StringVar()
Entry(root, width=10, textvariable=ProjName,font=("Sans Bold", 9)).grid(row=34, column=3,sticky='e')
ProjName.set(par1[8])

Label(root, text="COMPANY NAME : ",font=("Sans Bold", 9)).grid(row=34, column=5,sticky=W)
Co = StringVar()
Entry(root, width=10, textvariable=Co,font=("Sans Bold", 9)).grid(row=34, column=5,sticky='e')
Co.set(par2[8])

Label(root, text="Option : ",font=("Sans Bold", 9)).grid(row=35, column=3,sticky=W)
Option = StringVar()
Entry(root, width=10, textvariable=Option,font=("Sans Bold", 9)).grid(row=35, column=3,sticky='e')
Option.set(par1[9])

Label(root, text="Version : ",font=("Sans Bold", 9)).grid(row=35, column=3,sticky=W)
Version = StringVar()
Entry(root, width=10, textvariable=Version,font=("Sans Bold", 9)).grid(row=35, column=3,sticky='e')
Version.set(par1[10])


Label(root, text="  ").grid(row=36, column=3, sticky=E)

#---------------------------------------------NODES PLOT SELECT--------------------------------------------------------
var1a = IntVar()
Checkbutton(root, text=' Plot node polygon  ',font=("Sans Bold", 9), variable=var1a ).grid(row =3, column=0, sticky=W)
var1a.set("1")
var1b = IntVar()
Checkbutton(root, text=' Plot nodes  ',font=("Sans Bold", 9), variable=var1b ).grid(row =4, column=0, sticky=W)
var1b.set("1")
var1c = IntVar()
Checkbutton(root, text=' Plot node grid origin  ',font=("Sans Bold", 9), variable=var1c ).grid(row =5, column=0, sticky=W)
var1c.set("1")
#---------------------------------------------GRID PLOT SELECT -------------------------------------------------------------
var2a = IntVar()
Checkbutton(root, text=' Plot shot polygon ',font=("Sans Bold", 9), variable=var2a ).grid(row =11, column=0,sticky=W)
var2a.set=("1")
var2b = IntVar()
Checkbutton(root, text=' Plot grid points  ',font=("Sans Bold", 9), variable=var2b ).grid(row =12, column=0, sticky=W)
var2b.set("0")
var2c = IntVar()
Checkbutton(root, text=' Plot grid origin  ',font=("Sans Bold", 9), variable=var2c ).grid(row =13, column=0, sticky=W)
var2c.set("1")


#var3b = IntVar()
#Checkbutton(root, text=' Plot Sail lines  ',font=("Sans Bold", 9), variable=var3b ).grid(row =14, column=0, sticky=W)
#var3b.set("0")

#var3c = IntVar()
#Checkbutton(root, text=' Plot sail origin  ',font=("Sans Bold", 9), variable=var3c ).grid(row =15,column=0, sticky=W)
#var3c.set("0")

#varspsr = IntVar()
#Checkbutton(root, text=' Generate SPSr  ',font=("Sans Bold", 9), variable=varspsr ).grid(row  =18,column=0, sticky=W)
#varspsr.set("0")

#varspss = IntVar()
#Checkbutton(root, text=' Generate SPSs  ',font=("Sans Bold", 9), variable=varspss ).grid(row  =19,column=0, sticky=W)
#varspss.set("0")

#varspss=0
#varspsr=0
#------------------Reading  Node polygon-----------------------------

def rnodes():

 global xp,yp

 X=[]
 xp,yp=[],[]

 with open('pol2.txt','r') as f1:
     reader = csv.reader(f1, delimiter=' ')
     next(reader)
     for row in reader:
      xp.append(float(row[0]))
      yp.append(float(row[1]))

 for k in range(0,len(xp)):
      X.append([float(xp[k]),float(yp[k])])
 poly=Polygon(X)
 PO=Polyarea(xp,yp)
 ring = LinearRing(X)
 s=Polygon(ring)

#-----------------------------------------------
#os.remove("Design_log.txt")
## writer = MyWriter(sys.stdout, 'Design_log.txt')
## sys.stdout = writer
#-----------------------------------------------
 global NodeArea
 NodeArea=PO.getarea()
 print ('     ')
 print ('Node Poligons -------------------------------')
 print ('Node polygon - Polyarea (SQ Km)', PO.getarea())
# print ('Node polygon order clockwise?' , PO.getorder())
 print ('Node polygon (SQ Km)', s.area/1000000)
 print ('     ')
 
#------------------Node Grid Generation -----------------------------

 global x0,y0
 global XX,YY
 global NumberofNodes
 global NumberofNodeLines

 XX,YY=[],[]
 rangex=rngx.get()
 rangey=rngy.get()
 x0=origx.get()
 y0=origy.get()
 dx=nodex.get()
 dy=nodey.get()
 nx=int(rangex/dx) #+2
 ny=int(rangey/dy) #+2
 angle = anglex.get()
 angle1=angle
 if v.get() ==0:
   angle1+=30.
 stagger=0
 if v.get() == 1:
  stagger=1
 f1 = open('SPSnodes.txt', 'w')
 f = open('nodes.txt', 'w') 
 fspsr = open("SPS.r", 'w')

 XX,YY=[],[]
 o1=ort.get()
 CQ=Grid(x0,y0,dx,dy,nx,ny,angle,angle1,stagger,o1)
 x= CQ.getarrx()
 y= CQ.getarry()
 nnx= CQ.getnnx() 
 nny= CQ.getnny()  

 f.write("%s\n" % 'x y s l')
 NumberofNodes=0
 NumberofNodeLines=0
 ntotal=len(x)
###
 a=PB(400,20)
 a.settitle("Nodes Computation")
 a.open()
###
 upt=0
 progress=1./ntotal

 for k in range(0,nny):
  
###
   a.update(upt)
###
   flagline=0
   flagnode=0 
   NumberofNodesPerLine=0

   for l in range(0,nnx):
     aa= poly.contains(Point([float(x[k][l]),float(y[k][l])])) ####2
     bb= ring.contains(Point([float(x[k][l]),float(y[k][l])]))  ### Inclui os nodes on the polygon boundary
     if aa or bb:
      NumberofNodes+=1
      XX.append(float(x[k][l]))
      YY.append(float(y[k][l]))
      aax=x[k][l]
      aay=y[k][l]
      if flagnode==0:
         NumberofNodesPerLine+=1
         LastStation=l
      if flagline==0:
         NumberofNodeLines=k
         FirstStation=l
         flagline=1

###1
      f.write("%7.2f %7.2f %i %i\n" % (aax,aay,k,l))

#        Writing  SPS r
##     if varspsr.get() ==1:
##           line_new = '%1s%10.2f%10.2f%2s%1i%2s%4i%4.1f%4i%2i%6.1f%9.1f%10.1f%6.1f%3i%6i\n'\
##                   % ("R",float(k),float(l),"  ",1,"ND",0,30.\
##                    ,7777,0,30,aax,aay,-30,365,235959)
##           fspsr.write( line_new)
##   flagnode=1
##   if flagnode==1 and flagline==1:
##     f1.write("%2i %2i %2i %2i %5.2f\n" % (NumberofNodeLines,FirstStation, LastStation, NumberofNodesPerLine,(NumberofNodesPerLine-1)*(dx/1000.)))
##     f1.write("%i %i %i %i %f\n" % (NumberofNodeLines,FirstStation, LastStation, NumberofNodesPerLine,(NumberofNodesPerLine-1)*(dx/1000.)))

   upt=upt+progress
 f1.close()
 f.close()
###
 a.close()
###
## if NumberofNodes ==0:
##  messagebox.showinfo("Information","Check x0 and y0")

 print ('Node grid ----------------------------')
 if v.get() == 1:
  print ('Nodes Alternated')
 if v.get() == 0:
  print ('Nodes Hexagonal')
  print (' ATTENTION Node line space reduced to apothem:', (dx/2)*math.sqrt(3))
 if v.get() ==2:
  print ('Rectangular grid')

 print ('Total number of nodes=', NumberofNodes)
 print ('Total number of node lines=', NumberofNodeLines)
 print ('Total KM of nodes=', (NumberofNodes-NumberofNodeLines)*(dx/1000.))
 print ('Average number of nodes / line=', NumberofNodes/NumberofNodeLines)
 print ('Average Km / Line =', ((NumberofNodes-NumberofNodeLines)*(dx/1000))/NumberofNodeLines)
 print ('Total time of node deployment' , (NumberofNodes-NumberofNodeLines-1)*(dx/1000)/(velnode.get()*1.852), 'days')
 print ('          ')



#------------------Shot Grid Generation -----------------------------------
#
def rshots():

 X3=[]

#PORRA
 global x0a,y0a,x0b,y0b
 global XXgrid,YYgrid
 global xp3,yp3
 global NumberofSailPoints
 global NumberofSailLines 
 global ShotArea
 global nsources,dxa,dya
 global NumberofShotPoints,NumberofShotLines,AvSailKm_1,AvShotKm_1,TotalShootTimeHours,TotalShootTimeDays
 global ShotsPerKm2,LinearSailKm,LinearShotKm


 xp3,yp3=[],[]

# Check which source polygon to be used
#
 if tkvar.get()== 'ProvidedPolygon' :
  e=open('polshot.txt','w')
  with open('pol3.txt','r') as f2:
     reader = csv.reader(f2, delimiter=' ')
     next(reader)
     for row in reader:
      xp3.append(float(row[0]))  ###3
      yp3.append(float(row[1]))
  e.write("%s %s\n" % ("x","y"))
  for i in range (0,len(xp3)):
   e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

 if tkvar.get()== 'CaioExpansion':
  e=open('polshot.txt','w')
  C=Poly(xp,yp,halo.get())
  xp3=C.getpxe()
  yp3=C.getpye()
  e.write("%s %s\n" % ("x","y"))
  for i in range (0,len(xp3)):
   e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

 if tkvar.get()=='CaioExpRounded':  
    e=open('polshot.txt','w')
    C=Poly(xp,yp,halo.get())
    xp3=C.getpxe()
    yp3=C.getpye()
    C1=Polyexp(xp3,yp3,halo.get())
    xp3=C1.getpex()
    yp3=C1.getpey()
    e.write("%s %s\n" % ("x","y"))
    for i in range (0,len(xp3)):
      e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

 for k in range(0,len(xp3)):
      X3.append([float(xp3[k]),float(yp3[k])])
 polyshot = Polygon(X3)
 ring = LinearRing(X3)
 s = Polygon(ring)
# global ShotArea
 ShotArea = s.area/1000000
 print ('     ')
 print ('Shot poligons -------------------------------')
 print ('Shot polygon (SQ Km)', s.area/1000000)

#------------------Sail(Shot) Line Grid ------------------

 LLgrid,PPgrid=[],[]
 XXgrid,YYgrid=[],[]
 LINgrid,PTNgrid=[],[]

 rangexa=rngxa.get()
 rangeya=rngya.get()
 x0a=origxa.get()
 y0a=origya.get()
 dxa=shotx.get()
 dya=shoty.get()
 ##VesselSpeed=BoatSpeed.get()
 ##RecordLength=DesiredRecordLength.get()
 nsources = Nsources.get()
 anglea = anglexa.get()
 angleb=anglea  ######
 o1=ort1.get()
 ang = anglea*np.pi/180.
 stagger = 0
 nxa=int(rangexa/dxa)
 nya=int(rangeya/dya)

 if nsources==1:
    dxb =dxa
    dyb=dya
 if nsources==2:
    dxb=dxa/2
    dyb=dya/2
 if nsources==3:      
    dxb=dxa/2
    dyb=dya 
 nxb=int(rangexa/dxb)
 nyb=int(rangeya/dyb)


 CQgrid=Grid(x0a,y0a,dxb,dyb,nxb,nyb,anglea,angleb,stagger,o1)

 nnx=    CQgrid.getnnx()
 nny=    CQgrid.getnny()
 xgrid=  CQgrid.getarrx()
 ygrid=  CQgrid.getarry()


 grid = open('grid.txt', 'w')
 sht =   open('shots.txt', 'w')
 sail =  open('sail.txt', 'w')
 grid.write("%s\n" % 'x y l s')
 sht.write("%s\n" % 'x y l s')
 sail.write("%s\n" % 'x y l s')

 ntotal=len(xgrid)
 a=PB(400,20)
 a.settitle("Grid lines Computation")
 a.open()
 upt=0
 progress=1./ntotal

#  Single source ---------------------------------

 SailLineInterval = dya
 SailPointInterval = dyb
 FirstSailLine = 1
 FirstSailLineNumber = 1000
 SailLineIntervalIdx = 1 #int(dya/dyb)
 SailPointIntervalIdx = 1

 for GridLine in range(0,nny):
    a.update(upt)
    for GridPoint in range(0,nnx):
          XXgrid.append(float(xgrid[GridLine][GridPoint]))
          YYgrid.append(float(ygrid[GridLine][GridPoint]))
          LLgrid.append([GridLine,GridPoint])
          LINgrid.append([GridLine])
          PTNgrid.append([GridPoint])
          grid.write("%7.2f %7.2f %2i %2i\n" % (xgrid[GridLine][GridPoint],ygrid[GridLine][GridPoint],GridLine,GridPoint))
    upt=upt+progress
 a.close()

#PORRA3

 A=LLgrid[-1] 
 B=LLgrid[0]
 ny= A[0]-B[0]+1
 nx= A[1]-B[1]+1
 print ("nx,ny",nnx,nny,nx,ny,A[0],B[0],A[1],B[1],len(A),len(B))
 
 GRIDXX=np.reshape((np.asarray(XXgrid)),(ny,nx))
 GRIDYY=np.reshape((np.asarray(YYgrid)),(ny,nx))
 GRIDLN=np.reshape((np.asarray(LINgrid)),(ny,nx))
 GRIDPT=np.reshape((np.asarray(PTNgrid)),(ny,nx))
 print("GRIDXX,GRIDYY,GRIDLN,GRIDPT", GRIDXX.shape,GRIDYY.shape,GRIDLN.shape,GRIDPT.shape)
 
 ntotal=len(XXgrid)
 a=PB(400,20)
 a.settitle("Sail lines Computation")
 a.open()
 upt=0
 progress=1./ny

 adv=int(nsources)
 if nsources==1:
     interv = int(dya/dyb)
 if nsources==2: 
     interv =int(2*adv)
 if nsources==3:
     interv=2
     adv=0
#  Initalizing the shot statistic counter 
 NumberofShotPoints = 0
 NumberofSailPoints = 0
 NumberofShotLines = 0
 NumberofSailLines  = 0
 NumberofShotPointsPerLine = 0
 NumberofSailPointsPerLine = 0
 sailint = 1
 sailflag= 0
 ##OutsidePoints = 'false'

 for jj in range(0,ny-1,interv):
    a.update(upt)
    for ii in  range(0,nx-interv,interv):
     InsidePoints  = polyshot.contains(Point([float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii])]))
#     OutsidePoints = ring.contains(Point([float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii])]))
     if InsidePoints: # or OutsidePoints:

      if nsources ==2:
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj][ii]),(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+adv][ii+adv]),(GRIDYY[jj+adv][ii+adv]),GRIDLN[jj+adv][ii+adv],GRIDPT[jj+adv][ii+adv]))
        sail.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+1][ii+1]),(GRIDYY[jj+1][ii+1]),GRIDLN[jj+1][ii+1],GRIDPT[jj+1][ii+1]))
        NumberofShotPoints = NumberofShotPoints + 2
        NumberofSailPoints = NumberofSailPoints + 2
      if nsources ==1:
        sht.write("%7.2f %7.2f %2i %2i\n" % (float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        sail.write("%7.2f %7.2f %2i %2i\n" % (float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        NumberofShotPoints = NumberofShotPoints + 1
        NumberofSailPoints = NumberofSailPoints + 1
      if nsources ==3: 
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj][ii]),(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+adv][ii+adv]),(GRIDYY[jj+adv][ii+adv]),GRIDLN[jj+adv][ii+adv],GRIDPT[jj+adv][ii+adv]))
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+adv+1][ii+adv+1]),(GRIDYY[jj+adv+1][ii+adv+1]),GRIDLN[jj+adv+1][ii+adv+1],GRIDPT[jj+adv+1][ii+adv+1]))
        NumberofShotPoints = NumberofShotPoints + 3

# -------- Loop for sailines 

     if nsources == 3 and (jj+sailint) <ny-1:
        DentroPoints  = polyshot.contains(Point([float(GRIDXX[jj+sailint][ii]),float(GRIDYY[jj+sailint][ii])]))
        OutsidePoints = ring.contains(Point([float(GRIDXX[jj+sailint][ii]),float(GRIDYY[jj+sailint][ii])]))
        if DentroPoints or OutsidePoints:
          inc = sailint%2
          sail.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+sailint][ii+inc]),(GRIDYY[jj+sailint][ii+inc]),GRIDLN[jj+sailint][ii+inc],GRIDPT[jj+sailint][ii+inc]))
          NumberofSailPoints = NumberofSailPoints + 2
          sailflag = 1
    if sailflag == 1 :
      sailint=sailint+1

#-------------------


    NumberofSailLines = NumberofSailLines + 1
    NumberofShotLines = NumberofShotLines + nsources 
    NumberofShotPointsPerLine = NumberofShotPointsPerLine + 1
    NumberofSailPointsPerLine = NumberofSailPointsPerLine + nsources
    upt=upt+progress

 a.close()

#     Writing  SPS s
#    if varspss.get() ==1:
#           line_new = '%1s%10.2f%10.2f%2s%1i%2s%4i%4.1f%4i%2i%6.1f%9.1f%10.1f%6.1f%3i%6i\n'\
#                    % ("R",float(k),float(l),"  ",1,"ND",0,30.\
#                    ,7777,0,30,xsail[k][l],ysail[k][l],-30,365,235959)
#           fspss.write( line_new)




## if NumberofShotPoints ==0:
##  messagebox.showinfo("Information","Check x0 and y0")
 print ('     ')
 print ('Shot Grid  -------------------------------')
 print ('Shot Point Interval (m) =' ,nsources*dxa)
 print ('Pop Interval (m) =' ,dxa)
 print ('Crossline Shot Interval (m) =' ,nsources*dya)
 print ('Lateral distance of arrays (m) =' ,dya)
 print ('Sail Line Interval (m) =' ,dya*nsources)
 print ('Shot Point Interval (m) =' ,dxa) 
 #print ('Shooting Boal speed (m) =' , VesselSpeed)
 #print ('Desired Record Length (m) =' , RecordLength)
 print ('Bin x (m) =' , dxa*nsources/2 )
 print ('Bin y (m) =' , dya*nsources/2 )

 print ('Total number of shot points=' , NumberofShotPoints)
 print ('Total number of sail points=' , NumberofSailPoints)
 print ('Total number of Shot lines=' , NumberofShotLines)
 print ('Total number of Sail lines=' , NumberofSailLines)
 print ('Number of Sail Points per line=' , NumberofSailPointsPerLine)
 print ('Number of Shot Points per line=' , NumberofShotPointsPerLine)

 AvSailKm_1 = round(((NumberofSailPoints-(NumberofSailLines))*((nsources*dxb)/1000.))/NumberofSailLines,2)
 AvSailKm_2 = round((((NumberofSailPointsPerLine-1)*(dxa*nsources))/1000.),2)
 AvShotKm_1 = round(((NumberofShotPoints-(NumberofShotLines))*((nsources*dxa)/1000.))/NumberofShotLines,2)
 AvShotKm_2 = round((((NumberofShotPointsPerLine-1)*(dxa*nsources))/1000.),2)
 LinearSailKm = round(((NumberofSailPointsPerLine-1)*((dxb*nsources)/1000))* NumberofSailLines,2)
 LinearShotKm = round(((NumberofShotPointsPerLine-1)*((dxa*nsources)/1000))* NumberofShotLines,2)
 TotalShootTimeHours =((NumberofSailPointsPerLine-1)*((dxb*nsources)/(1000.*7.408)))* NumberofSailLines
 TotalShootTimeDays = ((NumberofSailPointsPerLine-1)*((dxb*nsources)/(1000.*(24.*7.408))))* NumberofSailLines
 ShotsPerKm2 =round(ShotArea/LinearShotKm,2)

 print ('Average Km / Sail Line 1 =', AvSailKm_1)
 print ('Average Km / Sail Line 2 =', AvSailKm_2)
 print ('Average Km / Shot Line 1 =', AvShotKm_1)
 print ('Average Km / Shot Line 2 =', AvShotKm_2)
#PORRA 5.0
 print ('Shot area Km**2 = ', ShotArea)
 print ('Total Linear Sail Km =', LinearSailKm)
 print ('Total Linear Shot Km =', LinearShotKm)
 print ('Total shoot time hours @ 4 knots= %8.2f' % (TotalShootTimeHours))
 print ('Total shoot time days @ 4Knts = %8.2f' % (TotalShootTimeDays))
 print ('Shots/Km2' , ShotsPerKm2)
 print ("dxa,dxb",  dxa,dxb)
 print ('         ')

 upt=upt+progress
 a.close()
 grid.close()
 sail.close()
 sht.close()
 fold()
 planout()

#------------------------------------------------------------------------------------------------- 
def fold():

   global FoldOffset, FoldCount

   FoldOffset = []
   FoldCount = []

   print (MaxOff.get())
   OffInt=MaxOff.get()/20.
   for  i in  range(0,21):
      FoldOffset.append ( float(i*OffInt))
      FoldCount.append ( (FoldOffset[i]/(nodex.get()*2)) * (FoldOffset[i]/(nodey.get()*2))*math.pi)

#--------------------------------------------------------------------------------------------------
def planout ():

# f1 = open("nodes.txt", 'r')
# f2 = open("shots.txt", 'r')

# img = Image.open("geomagg3.bmp")
# r, g, b, a = img.split()
# img =Image.merge("RGB", (r,g,b))
# img.save('geomagg3.bmp')

 book = xlwt.Workbook(encoding="utf-8")

 sheet0 = book.add_sheet("Parameters")
 sheet1 = book.add_sheet("Receivers")
 sheet2 = book.add_sheet("Shots")
 sheet3 = book.add_sheet("Nodes_polygon")
 sheet4 = book.add_sheet("Shots_polygon")
 sheet5 = book.add_sheet("Fold x Offset")

# Defining styles
 style= xlwt.easyxf(' font: name Arial, bold on; borders: left thick,  right thick,top thick, bottom thick;  pattern: pattern solid, fore_colour gray25 ;')
 style1= xlwt.easyxf('font: name Arial, bold on; borders: left thick,  right thick,top thick, bottom thick;  pattern: pattern solid, fore_colour light-yellow;')
 style2= xlwt.easyxf(' font: name Arial, bold on; borders: left thick,  right thick,top thick, bottom thick;  pattern: pattern solid, fore_colour ivory ;')
 style3= xlwt.easyxf(' font: name Arial, bold on; borders: left thick,  right thick,top thick, bottom thick;  pattern: pattern solid, fore_colour lime ;')
 style4a= xlwt.easyxf(' font: bold on , height 220;')
 style4= xlwt.easyxf(' font: bold on , height 200; pattern: pattern solid, fore_colour white ;')
 style4b= xlwt.easyxf(' font: bold on , height 200; pattern: pattern solid, fore_colour ivory ;')
 style5= xlwt.easyxf('font: name Arial, bold on; borders: left thick,  right thick,top thick, bottom thick;  pattern: pattern solid, fore_colour light-blue ')
 style6= xlwt.easyxf('font: name Arial, bold on, height 220; borders: bottom medium, top medium;  pattern: pattern solid, fore_colour light-orange ')
 style6a= xlwt.easyxf('font: name Arial, bold on, height 220; borders: bottom medium, top medium, right medium;  pattern: pattern solid, fore_colour light-orange ')
 style6b= xlwt.easyxf('font: name Arial, bold on, height 220; borders: bottom medium, top medium, left medium;  pattern: pattern solid, fore_colour light-orange ')

 style8= xlwt.easyxf(' font: bold off , height 140;')

# sheet0.insert_bitmap('geomagg3.png',0,0)
 stylex= xlwt.XFStyle()
 stylex.num_format_str= 'D-MMM-YY'
 sheet0.write(1,6,datetime.datetime.now(), stylex)

 sheet0.write(0,0, "      ",style6b)
 sheet0.write(0,1, "GEOMAGG      ",style6)
 sheet0.write(0,2, "      ",style6)
 sheet0.write(0,3, "      ",style6)
 sheet0.write(0,4, "      ",style6)
 sheet0.write(0,5, "      ",style6)
 sheet0.write(0,6, "      ",style6a)

 sheet0.write(8,1, "      ",style6)
 sheet0.write(8,0, "Nodes",style6b)
 sheet0.write(8,2, "      ",style6)
 sheet0.write(8,3, "      ",style6)
 sheet0.write(8,4, "Shots      ",style6)
 sheet0.write(8,5, "      ",style6)
 sheet0.write(8,6, "      ",style6a)


 sheet0.write(2,0, ProjName.get(),style4a)
 sheet0.write(4,0, Co.get(),style4a)
 sheet0.write(4,2, Option.get(),style4a)
 sheet0.write(4,4, Version.get(),style4a)
 sheet0.write(6,0, espg.get(),style4a)

 sheet0.write(26,0, "      ",style6b)
 sheet0.write(26,1, "      ",style6)
 sheet0.write(26,2, "      ",style6)
 sheet0.write(26,3, "       ",style6)
 sheet0.write(26,4, "      ",style6)
 sheet0.write(26,5, "      ",style6)
 sheet0.write(26,6, "      ",style6a)


# for i in range(11,22):
#   sheet0.write(i,3, "   ",style4)

# Nodes
 sheet0.write(10,0, "Node Line Interval (m):",style4)
 sheet0.write(11,0, "Node Interval (m):",style4)
 sheet0.write(12,0, "Number of nodes:",style4)
 sheet0.write(13,0, "Number of lines:",style4)
 sheet0.write(14,0, "Total line length (Km):",style4)
 sheet0.write(15,0, "Average line length (Km):",style4)
 sheet0.write(16,0, "Station density /SQKm:",style4)
 sheet0.write(17,0, "Min nodes /line:",style4)
 sheet0.write(18,0, "Max nodes /line:",style4)
 sheet0.write(19,0, "Line direction:",style4)
 sheet0.write(20,0, "Receiver area sqKm:",style4)

 sheet0.write(10,2,  float(nodex.get()),style4b)
 sheet0.write(11,2, float(nodey.get()),style4b)
 sheet0.write(12,2, NumberofNodes,style4b)
 sheet0.write(13,2, NumberofNodeLines,style4b)
 sheet0.write(14,2, round((NumberofNodes-NumberofNodeLines)*(nodex.get()/1000.),2),style4b) ###5
 sheet0.write(15,2, round((NumberofNodes-NumberofNodeLines)*(nodex.get()/1000.)/NumberofNodeLines,2),style4b)
 sheet0.write(16,2, round(NumberofNodes/NodeArea,2),style4b)

 sheet0.write(19,2, 90.-float(anglex.get()),style4b)
 sheet0.write(20,2, round(NodeArea,2),style4b)

#Shots
 sheet0.write(10,4, "Sail Line Interval (m):        ",style4)
 sheet0.write(11,4, "Shot Interval (m):",style4)
 sheet0.write(12,4, "Bin size - X (m):",style4)
 sheet0.write(13,4, "Bin size - Y (m):",style4)
 sheet0.write(14,4, "Number of shots:",style4)
 sheet0.write(15,4, "Number of shot lines:",style4)
 sheet0.write(16,4, "Number of sail lines:",style4)
 sheet0.write(17,4, "Average length of the Sail Line (Km):",style4)
 sheet0.write(18,4, "Average length of the Shot Line (Km):",style4)
 sheet0.write(19,4, "Total length of the Sail Lines (Km):",style4)
 sheet0.write(20,4, "Total length of the Shot Lines (Km):",style4)
 sheet0.write(21,4, "Total shooting time without line change (hours)':",style4)
 sheet0.write(22,4, "Total shooting time without line change (days)':",style4)
 sheet0.write(23,4, "Shot density /SQKm:",style4)
# sheet0.write(17,4, "Min shots /line:",style4)
# sheet0.write(18,4, "Max shots /line:",style4)
# sheet0.write(19,4, "Line direction:",style4)
# sheet0.write(20,4, "Shot area sqKm:",style4)
# sheet0.write(22,4, "Shotline chg time (hrs):",style4)
# sheet0.write(23,4, "Shotline total days:",style4)

#
 sheet0.write(10,6, float(nsources*dya),style4b)
 sheet0.write(11,6, float(dxa),style4b)
 sheet0.write(12,6, float(dxa/2),style4b)
 sheet0.write(13,6, float(dya/2),style4b)
 sheet0.write(14,6, NumberofShotPoints,style4b)
 sheet0.write(15,6, NumberofShotLines,style4b)
 sheet0.write(16,6, NumberofSailLines,style4b)
 sheet0.write(17,6, AvSailKm_1,style4b)
 sheet0.write(18,6, AvShotKm_1,style4b)
 sheet0.write(19,6, LinearSailKm,style4b)
 sheet0.write(20,6, LinearShotKm,style4b)
 sheet0.write(21,6, round(TotalShootTimeHours,2),style4b)
 sheet0.write(22,6, round(TotalShootTimeDays,2),style4b)
 sheet0.write(23,6, round(ShotsPerKm2,2),style4b)




# Sheet 1

# sheet1.write(0,0, "Line_#",style)
# sheet1.write(0,1, "BOL_STN_#",style)
# sheet1.write(0,2, "EOL_STN_#",style)
# sheet1.write(0,3, "# of Stations",style)
# sheet1.write(0,4, "Line Km",style)
# sheet1.write(0,5, "Navtime hrs",style)


# sheet2.write(0,0, "Line_#",style1)
# sheet2.write(0,1, "BOL_STN_#",style1)
# sheet2.write(0,2, "EOL_STN_#",style1)
# sheet2.write(0,3, "# of Stations",style1)
# sheet2.write(0,4, "Line Km",style1)
# sheet2.write(0,5, "Navtime hrs",style1)


# sheet3.write(0,0, "X coordinate",style2)
# sheet3.write(0,1, "Y coordinate",style2)

# sheet4.write(0,0, "X coordinate",style3)
# sheet4.write(0,1, "Y coordinate",style3)

# sheet5.write(0,0, "Offset",style2)
# sheet5.write(0,1, "Fold",style2)

# n1,s1=[],[]
# n2,s2=[],[]
# n3,s3=[],[]
# n4,s4=[],[]
# n5,s5=[],[]

# reader = csv.reader(f1, delimiter=' ')
# for row in reader:
#    n1.append(row[0])
#    n2.append(row[1])
#    n3.append(row[2])
#    n4.append(row[3])
#    n5.append(row[4])

# reader = csv.reader(f2, delimiter=' ')
# for row in reader:
#    s1.append(row[0])
#    s2.append(row[1])    
#    s3.append(row[2])
#    s4.append(row[3])
#    s5.append(row[4])

# for i in range(0,len(n1)):
#    sheet1.write(i+1,0,float(n1[i]))
#    sheet1.write(i+1,1,float(n2[i]))
#    sheet1.write(i+1,2,float(n3[i]))
#    sheet1.write(i+1,3,float(n4[i]))
#    sheet1.write(i+1,4,round(float(n5[i]),2))
#    sheet1.write(i+1,5,round(float(n5[i])/(1.852*velnode.get()),2))


##    s=""
##    value=str(len(n1)+1)
##    seqA=["COUNT(A2:A",value,")"]
##    seqB=["MIN(D2:D",value,")"]
##    seqC=["MAX(D2:D",value,")"]
##    seqD=["SUM(D2:D",value,")"]
##    seqE=["SUM(E2:E",value,")"]
##    seqF=["SUM(F2:F",value,")"]
##    A=s.join(seqA)
##    B=s.join(seqB)
##    C=s.join(seqC)
##    D=s.join(seqD)
##    E=s.join(seqE)
##    F=s.join(seqF)

## sheet1.write(len(n1)+1, 0, xlwt.Formula(A),style)
## sheet1.write(len(n1)+1, 1, xlwt.Formula(B),style1)
## sheet1.write(len(n1)+1, 2, xlwt.Formula(C),style,)
## sheet1.write(len(n1)+1, 3, xlwt.Formula(D),style1)
## sheet1.write(len(n1)+1, 4, xlwt.Formula(E),style)
## sheet1.write(len(n1)+1, 5, xlwt.Formula(F),style1)

## value1=str(len(s1)+1)
## AA=s.join(["2*COUNT(A2:A",value1,")"])
## BB=s.join(["MIN(D2:D",value1,")"])
## CC=s.join(["MAX(D2:D",value1,")"])
## DD=s.join(["SUM(D2:D",value1,")"])
## EE=s.join(["2*SUM(E2:E",value1,")"])
## FF=s.join(["2*SUM(F2:F",value1,")"])


## sheet2.write(len(s1)+1, 0, xlwt.Formula(AA),style)
## sheet2.write(len(s1)+1, 1, xlwt.Formula(BB),style5)
## sheet2.write(len(s1)+1, 2, xlwt.Formula(CC),style,)
## sheet2.write(len(s1)+1, 3, xlwt.Formula(DD),style5)
## sheet2.write(len(s1)+1, 4, xlwt.Formula(EE),style)
## sheet2.write(len(s1)+1, 5, xlwt.Formula(FF),style5)
## sheet0.write(23, 6, xlwt.Formula(FF),style4)

#8888

## for i in range(0,len(s1)):
##    sheet2.write(i+1,0,float(s1[i]))
##    sheet2.write(i+1,1,float(s2[i]))
##    sheet2.write(i+1,2,float(s3[i]))
##    sheet2.write(i+1,3,float(s4[i]))
##    sheet2.write(i+1,4,float(s5[i]))
##    sheet2.write(i+1,5,round(float(s5[i])/(1.852*velshot.get()),2))

# nmin=99999.
# nmax=0.
# for i in range(0,len(n4)):
#    if float(n4[i])<nmin:
#       nmin=float(n4[i])
#    if float(n4[i])>nmax:
#       nmax=float(n4[i])

# smin=999999.
# smax=0.
# for i in range(0,len(s4)):
#    if float(s4[i]) <smin:
#       smin=float(s4[i])
#    if float(s4[i])>smax:
#       smax=float(s4[i])


# sheet0.write(17,2, nmin,style4)
# sheet0.write(18,2, nmax,style4)
# sheet0.write(17,6, smin,style4)
# sheet0.write(18,6, smax,style4)


# Writing polygons

## for i in range(0,len(xp)):
##    sheet3.write(i+1,0,float(xp[i]))
##    sheet3.write(i+1,1,float(yp[i]))

## for i in range(0,len(xp3)):
##    sheet4.write(i+1,0,float(xp3[i]))
##    sheet4.write(i+1,1,float(yp3[i]))


# for i in range(1,len(FoldOffset)):
#    sheet5.write(i+1,0,float(FoldOffset[i]))
#    sheet5.write(i+1,1,float(FoldCount[i]))


 book.save("Spreadsheet.xls")


#-------------------------CLASSES---------------------------------------
#--------------Class Source

class Source(object):

 def __init__(self,x,y,dx,ang,ort):
  import math
  import numpy as np

  self.ort=ort
  self.x=x
  self.y=y
  self.ang=ang
  self.dx=dx
  
  ang1 = self.ang*np.pi/180.

  if self.ort==0:
    self.deltax1=(dx/2)*-math.sin(ang1)
    self.deltay1=(dx/2)*math.cos(ang1)
    self.deltax2=(dx/2)*-math.sin(ang1)*-1
    self.deltay2=(dx/2)*math.cos(ang1)*-1

  else:
    self.deltay1=(dx/2)*math.sin(ang1)
    self.deltax1=(dx/2)*math.cos(ang1)
    self.deltay2=(dx/2)*math.sin(ang1)*-1
    self.deltax2=(dx/2)*math.cos(ang1)*-1

  self.sourcex=np.zeros(len(self.x))
  self.sourcey=np.zeros(len(self.y)) 
  k=0
  for i in range(0,len(self.x)):
     if (i%2) == 0:
      self.sourcex[k]=float(self.x[i])+self.deltax1
      self.sourcey[k]=float(self.y[i])+self.deltay1
     if (i%2) == 1 :
      self.sourcex[k]=float(self.x[i])+self.deltax2
      self.sourcey[k]=float(self.y[i])+self.deltay2
     k+=1
     
 def getsourcex(self):
      return self.sourcex
 def getsourcey(self):
      return self.sourcey

#---------------------Class Poly----------------------------------------
class Poly(object):

 def __init__(self,px,py,halo):

  import numpy as np
  import math  as m
  import matplotlib.pyplot as plt
  import csv
  from shapely.geometry import Point, Polygon
  from shapely.geometry.polygon import LinearRing, Polygon
  from shapely.geometry import MultiPoint

  self.px=px
  self.py=py
  self.halo=halo
  phi = np.zeros(len(self.px))
  p1x = np.zeros(len(self.px))
  p1y = np.zeros(len(self.px))
  p2x = np.zeros(len(self.px))
  p2y = np.zeros(len(self.px))
  self.pxe = np.zeros(len(self.px))
  self.pye = np.zeros(len(self.px))
  n=len(self.px)

  for i in range(1,n-1):
    phi[i]=m.atan2(float(self.py[i+1])-float(self.py[i]),float(self.px[i+1])-float(self.px[i]))
  phi[n-1]=m.atan2(float(self.py[1])-float(self.py[n-1]),float(self.px[1])-float(self.px[n-1]))
  phi[0]=phi[n-1]

  for i in range(1,n):
      p1x[i]=float(self.px[i])-m.sin(phi[i-1])*halo
      p1y[i]=float(self.py[i])+m.cos(phi[i-1])*halo
  p1x[0]=p1x[n-1]
  p1y[0]=p1y[n-1]

  for i in range(1,n-1):
    p2x[i]=(-p1x[i]*m.tan(phi[i-1])+p1x[i+1]*m.tan(phi[i])+p1y[i]-p1y[i+1])
    p2x[i]=p2x[i]/(m.tan(phi[i])-m.tan(phi[i-1]))
    p2y[i]=(-p1x[i]*m.tan(phi[i-1])*m.tan(phi[i])+
              p1x[i+1]*m.tan(phi[i-1])*m.tan(phi[i])
             -p1y[i+1]*m.tan(phi[i-1])+p1y[i]*m.tan(phi[i]))
    p2y[i]= p2y[i]/(m.tan(phi[i])-m.tan(phi[i-1]))
    
    self.pxe[i]=p2x[i]
    self.pye[i]=p2y[i]


  p2x[n-1]=(-p1x[n-1]*m.tan(phi[n-2])
             +p1x[1]*m.tan(phi[n-1])
             +p1y[n-1]-p1y[1])
  p2x[n-1]=p2x[n-1]/(m.tan(phi[n-1])-m.tan(phi[n-2]))
  p2y[n-1]=(-p1x[n-1]*m.tan(phi[n-2])*m.tan(phi[n-1])
            +p1x[1]*m.tan(phi[n-2])*m.tan(phi[n-1])
            -p1y[1]*m.tan(phi[n-2])+p1y[n-1]*m.tan(phi[n-1]))
  p2y[n-1]=p2y[n-1]/(m.tan(phi[n-1])-m.tan(phi[n-2]))

  self.pxe[n-1]=p2x[n-1]
  self.pye[n-1]=p2y[n-1]

  p2x[0]=p2x[n-1]
  self.pxe[0]=p2x[0]
  p2y[0]=p2y[n-1]
  self.pye[0]=p2y[0]


 def getpxe(self):
      return self.pxe
 def getpye(self):
      return self.pye

#-----------------------------Class grid--------------------
#PORRA4
class Grid(object):

 import numpy as np
 import math

 def __init__(self,x0,y0,dx,dy,nx,ny,angle,angle1,stagger,ort):

  import numpy as np
  import math
  import matplotlib.pyplot as plt

  self.ort=ort
  self.x0=x0
  self.y0=y0
  self.dx=dx
  self.dy=dy
  self.nx=nx
  self.ny=ny
  self.angle=angle
  self.angle1=angle1
  self.stag=stagger
  ang = self.angle*np.pi/180.
  ang1 = self.angle1*np.pi/180.

  if self.ort==1:
    ydx=self.dy*math.cos(ang);
    ydy=self.dy*math.sin(ang);
    xdx=self.dx*-math.sin(ang1);
    xdy=self.dx*math.cos(ang1);
  else:
    xdx=self.dx*math.cos(ang);
    xdy=self.dx*math.sin(ang);
    ydx=self.dy*-math.sin(ang1);
    ydy=self.dy*math.cos(ang1);

  self.gridx=[]
  self.gridy=[]

  for j in range(0,self.ny):
   self.gridx.append([])
   self.gridy.append([])
   for i in range (0,self.nx): 
      if j%2 == 0:
       extrax=self.stag*(xdx/2)
       extray=self.stag*(xdy/2)
      else:
       extrax=0
       extray=0
      xx=self.x0+(i)*xdx +extrax
      yy=self.y0+(i)*xdy +extray
      self.gridx[j].append(xx)
      self.gridy[j].append(yy)
   self.x0+=ydx
   self.y0+=ydy

  self.xx = np.array(self.gridx)
  self.yy = np.array(self.gridy)

  self.nnx = np.size(self.xx,1)
  self.nny = np.size(self.yy,0)

 def getarrx(self):
      return self.xx
 def getarry(self):
      return self.yy
 def getnnx(self):
      return self.nnx
 def getnny(self):
      return self.nny

#---------------Polyarea ------------------------------------

class Polyarea(object):
 
 import math

 def __init__(self,xp,yp):

  self.xp=xp
  self.yp=yp
  dd=0
  ss=0
  for j in range(0,len(self.xp)-1):
     dd+=float(self.xp[j])*float(self.yp[j+1])
     ss+=float(self.xp[j+1])*float(self.yp[j])

  self.A=-(dd-ss)/2000000;

  if self.A > 0 :
   self.order = 'true'

 def getarea(self):
     return self.A
 def getorder(self):
      return self.order

#---------------Cio Polyexp rounding-------------------------------------

class Polyexp(object):

 def __init__(self,px,py,halo):

  import numpy as np
  import math  as math

  self.X=px
  self.Y=py
  self.halo=halo
  phi = np.zeros(len(self.X))
  phi1 = np.zeros(len(self.X))
  A1 = np.zeros(len(self.X))
  pex,pey=[],[]

  self.N=len(self.X)

  phi[0] =math.atan2(self.Y[1]-self.Y[0],self.X[1]-self.X[0])
  phi1[0]=math.atan2(self.Y[self.N-2]-self.Y[0],self.X[self.N-2]-self.X[0])

  for  ij in range(1,self.N-1):
       phi1[ij]=math.atan2(self.Y[ij-1]-self.Y[ij],self.X[ij-1]-self.X[ij])
       phi[ij]=math.atan2(self.Y[ij+1]-self.Y[ij],self.X[ij+1]-self.X[ij])

# Find the concave vertices please
  halo1 =self.halo
  halo2 =self.halo

#  print 'N',self.N
  for i in range(0,self.N-1):
     concv=(self.X[i]-self.X[i-1])*(self.Y[i+1]-self.Y[i])-(self.X[i+1]-self.X[i])*(self.Y[i]-self.Y[i-1])
     if concv>0 :
      pex.append(self.X[i])
      pey.append(self.Y[i])
     else:
# Compute the distance to next and previous vertices
      if i==0:
         A1[i]=math.sqrt((self.Y[self.N-2]-self.Y[i])**2+(self.X[self.N-2]-self.X[i])**2)
      else:
         A1[i]=math.sqrt((self.Y[i-1]-self.Y[i])**2+(self.X[i-1]-self.X[i])**2)
         A1[i]=math.sqrt((self.Y[i+1]-self.Y[i])**2+(self.X[i+1]-self.X[i])**2)
      if A1[i]<self.halo:
         halo1=A1[i]
      if A1[i]<self.halo:
         halo2=A1[i]

#      Compute the new vertices  and Bezier

      pex.append(math.cos(phi1[i])*halo1/(math.tan ((phi[i]-phi1[i])/2))+self.X[i])
      pey.append(math.sin(phi1[i])*halo1/(math.tan ((phi[i]-phi1[i])/2))+self.Y[i])
      pex.append(math.cos(phi[i])*halo2/(math.tan ((phi[i]-phi1[i])/2))+self.X[i])
      pey.append(math.sin(phi[i])*halo2/(math.tan ((phi[i]-phi1[i])/2))+self.Y[i])
      halo1=self.halo
      halo2=self.halo

  pex.append(pex[0])
  pey.append(pey[0])
  self.ixn=len(pex)

  self.pp=pex
  self.qq=pey

 def getixn(self):
     return self.ixn
 def getpex(self):
     return self.pp
 def getpey(self):
     return self.qq

#-----------------Class  bar (Progress bar)--------------------
class PB:

    def settitle(self, title):
        self.__root.title(title)
    # Create Progress Bar
    def __init__(self, width, height):
#        self.__root = tk.Toplevel()
        self.__root = tkinter.Tk() #updated by Petr
        self.__root.resizable(False, False)
        self.__root.title('Wait please...')
        self.__canvas = tkinter.Canvas(self.__root, width=width, height=height)
        self.__canvas.grid()
        self.__width = width
        self.__height = height

    # Open Progress Bar
    def open(self):
        self.__root.deiconify()
        self.__root.focus_set()
        #self.__root.update()

    # Close Progress Bar
    def close(self):
        self.__root.withdraw()

    # Update Progress Bar
    def update(self, ratio):
        self.__canvas.delete(tkinter.ALL)
        self.__canvas.create_rectangle(0, 0, self.__width * ratio, \
                                       self.__height, fill='blue')
        self.__root.update()
        self.__root.focus_set()

#-------------------Class Print 

##class MyWriter:
##
##    def __init__(self, stdout, filename):
##        self.stdout = stdout
##        self.logfile = 'test' #file(filename, 'w')
##
##    def write(self, text):
##        self.stdout.write(text)
##        self.logfile.write(text)

##    def close(self):
##        self.stdout.close()
##        self.logfile.close()


#------------------- Call Fold ------------------------------
def foldm():
 os.system('./fold')

#------------------- Call Planilha----------------------------

def planilha():
 os.system('libreoffice Spreadsheet.xls&')


#------------------- Call Map PYQGIS----------------------------

def map():
 os.system('./map&')

#------------------Plot-----------------------------------
def plot():

 fig, ax = plt.subplots(figsize=(8, 8))

 ax.set_title('OBN survey area')

 if var2a.get() == 1:
   ax.plot(xp3, yp3, color='blue', alpha=0.9,
    linewidth=2, solid_capstyle='round', zorder=1)

 if var1a.get() == 1:
   ax.plot(xp, yp, color='red', alpha=0.9,
    linewidth=2, solid_capstyle='round', zorder=1)

 if var1b.get() == 1:
   ax.scatter(XX,YY,s=3.5,color='red',alpha=.9)

 if var2b.get() == 1:
   ax.scatter(XXgrid,YYgrid,s=.3,color='black',alpha=.2)

# if var3b.get() == 1:
#   ax.scatter(XXsail,YYsail,s=.3,color='black',alpha=.9)

 if var1c.get() == 1:
   ax.scatter(x0,y0,s=24.5,color='red',marker='s',alpha=.9)

 if var2c.get() == 1:
   ax.scatter(x0a,y0a,s=24.5,color='blue',marker='s',alpha=.9)

# if var3c.get() == 1:
#   ax.scatter(x0a,y0a,s=24.5,color='black',marker='s',alpha=.9)


 plt.show()

#-----------------------------------------------------------------------

Button(root,text="Nodes Computation",font=("Sans Bold", 9), command=rnodes).grid(row=13, column=5)

Button(root,text="Shots/Sails Computation",font=("Sans Bold", 9), command=rshots).grid(row=28, column=5)

#Button(root,text="PLOT ",font=("Sans Bold", 9), command=plot).grid(row=22, column=6)

Button(root,text="PLOT           ",font=("Sans Bold", 9), command=plot).grid(row=26, column=0)

Button(root,text="EXIT",font=("Sans Bold", 9), command=exit).grid(row=40, column=6,sticky=W )

Button(root,text="MAP PYQGIS     ",font=("Sans Bold", 9), command=map).grid(row=28, column=0)

Button(root,text="Spread Sheet   ",font=("Sans Bold", 9), command=planilha).grid(row=30, column=0)

Button(root,text="FOLD   ",font=("Sans Bold", 9), command=foldm).grid(row=32, column=0)

root.mainloop()

