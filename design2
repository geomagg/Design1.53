#!/usr/bin/env python3
import math
import numpy as np
import matplotlib.pyplot as plt
import csv
from shapely.geometry import Point, Polygon
from shapely.geometry.polygon import LinearRing, Polygon
from shapely.geometry  import MultiPoint
import tkinter as tk
from tkinter import*
import tkinter.filedialog
from tkinter.filedialog import askopenfilename
import tkinter.messagebox
import os
from sys import exit
import xlwt
from PIL import Image
import datetime

from poly import Poly
from source import Source
from grid import Grid
from polyarea import Polyarea
from polyexp import Polyexp
from diagram import diagram
from planout import planout
from tkinter import messagebox 
from tkinter import ttk
from tkinter.messagebox import showerror, showwarning, showinfo


fp = open("polipar1", 'r')
par1,par2=[],[]
reader = csv.reader(fp, delimiter=' ')
for row in reader:
    par1.append(row[0])
    par2.append(row[1])
fp.close()


# Error  Flags
flaggridnode = 0 
flagpolinode = 0
flagpolishot = 0


root = Tk()
root.title('OBN SURVEY DESIGN')

def OpenFile():
   filename = askopenfilename()

def About():
    print ("Version 1.50 = Marcos Guimaraes")

menu = Menu(root)
root.config(menu=menu)
filemenu = Menu(menu)
menu.add_cascade(label="File",font=("Sans Bold", 10), menu=filemenu)
filemenu.add_command(label="Spreadsheet file", command=OpenFile)
filemenu.add_command(label="Node polygon file", command=OpenFile)
filemenu.add_command(label="Survey Parameters", command=OpenFile)
filemenu.add_command(label="EXIT", command=exit)
helpmenu = Menu(menu)
menu.add_cascade(label="Help",font=("Sans Bold", 8), menu=helpmenu)
helpmenu.add_command(label="About", command=About)

photo = PhotoImage(file='geomagg3.png')
photo = photo.subsample(2)
photo_label = Label(root, image=photo)
photo_label.image = photo 
photo_label.grid()

Label(root, text='Design 1.51  ',font=("Sans Bold", 8)).grid(row=0,column=5,sticky=NE)
Frame(root, bg="black",width=400, height=400)


#------------ BLOCO  1 ------------------------------------------------------------------------
#######
Label(root, text="_______________________").grid(row=1, column=2, sticky=W)
Label(root, text="Nodes Parameters   ",font=("Sans Bold", 11)).grid(row=2, column=2, sticky=W)
#######
Label(root, text="Nodes space X (m):",font=("Sans Bold", 8)).grid(row=3, column=2,sticky='w')
nodex = DoubleVar()
Entry(root, width=10, textvariable=nodex,font=("Sans Bold", 8)).grid(row=3, column=3,sticky='w')
nodex.set(par1[0])

Label(root, text="       Nodes space Y (m):",font=("Sans Bold", 8)).grid(row=3, column=4,sticky='w')
nodey = DoubleVar()  
Entry(root, width=10, textvariable=nodey,font=("Sans Bold", 8)).grid(row=3, column=5,sticky='w')
nodey.set(par2[0])
#######
Label(root, text="Node grid origx",font=("Sans Bold", 8)).grid(row=4, column=2,sticky='w')
origx = DoubleVar()
Entry(root, width=10, textvariable=origx,font=("Sans Bold", 8)).grid(row=4, column=3,sticky='w')
origx.set(par1[1])
Label(root, text="      Node grid origy: ",font=("Sans Bold", 8)).grid(row=4, column=4,sticky='w')
origy = DoubleVar()
Entry(root, width=10, textvariable=origy,font=("Sans Bold", 8)).grid(row=4, column=5,sticky='w')
origy.set(par2[1])
##########
Label(root, text="Range X (m): ",font=("Sans Bold", 8)).grid(row=5, column=2,sticky='w')
rngy = DoubleVar()
Entry(root, width=10, textvariable=rngy,font=("Sans Bold", 8)).grid(row=5, column=3 ,sticky='w')
rngy.set(par2[3])
Label(root, text="       Range Y (m): ",font=("Sans Bold", 8)).grid(row=5, column=4, sticky='w')
rngx = DoubleVar()
Entry(root, width=10, textvariable=rngx,font=("Sans Bold", 8)).grid(row=5, column=5,sticky='w')
rngx.set(par1[3])
############
Label(root, text="Node Line dir (Deg): ",font=("Sans Bold", 8)).grid(row=6, column=2,sticky='w')
anglex = DoubleVar()
Entry(root, width=10, textvariable=anglex,font=("Sans Bold", 8)).grid(row=6, column=3,sticky='w')
anglex.set(par1[2])
###########
#---------------------------------------------------------------
########
v = IntVar()
v.set(par2[11])
languages = [("Hexagonal"),("Alternate"),("Rectangular"),]
def ShowChoice():
    print(v.get())
for val, language in enumerate(languages):
       Radiobutton(root,text=language,padx = 2,variable=v,command=ShowChoice,
       value=val,font=("Sans Bold", 7),fg ='blue').grid(row =7+val, column=2,sticky=W)
########
#--------------------------------------------------------------
########
ort = IntVar()
ort.set(0)  
languages = [("Parallel"),("Orthogonal"),]
def ShowChoice():
    print(ort.get())
for val, language in enumerate(languages):
    Radiobutton(root, 
     text=language, padx = 2, variable=ort, command=ShowChoice,
     value=val,font=("Sans Bold", 8),fg = 'blue').grid(row =7+val, column=4,sticky=W)
##########

# BLOCO 2 ---------------------------------------------------------------------------
Label(root, text="_______________________").grid(row=10, column=2, sticky=W)
Label(root, text="Shots Parameters   ",font=("Sans Bold", 11)).grid(row=11, column=2, sticky=W)
#########
Label(root, text="Pop space (m):      ",font=("Sans Bold", 8)).grid(row=12, column=2,sticky='w')
shotx = DoubleVar()
Entry(root, width=8, textvariable=shotx,font=("Sans Bold", 8)).grid(row=12, column=3,sticky='w')
shotx.set(par1[4])
Label(root, text="  Array separation Y(m): ",font=("Sans Bold", 8)).grid(row=12, column=4,sticky='w')
shoty = DoubleVar()
Entry(root, width=8, textvariable=shoty,font=("Sans Bold", 8)).grid(row=12, column=5,sticky='w')
shoty.set(par2[4])
########
Label(root, text="Grid orig x: ",font=("Sans Bold", 8)).grid(row=13, column=2,sticky='w')
origxa = DoubleVar()
Entry(root, width=8, textvariable=origxa,font=("Sans Bold", 8)).grid(row=13, column=3,sticky='w')
origxa.set(par1[5])
Label(root, text="  Grid orig y: ",font=("Sans Bold", 8)).grid(row=13, column=4,sticky='w')
origya = DoubleVar()
Entry(root, width=8, textvariable=origya,font=("Sans Bold", 8)).grid(row=13, column=5,sticky='w')
origya.set(par2[5])
########
Label(root, text="Shot Line dir (Deg): ",font=("Sans Bold", 8)).grid(row=14, column=2,sticky='w')
anglexa = DoubleVar()
Entry(root, width=8, textvariable=anglexa,font=("Sans Bold", 8)).grid(row=14, column=3,sticky='w')
anglexa.set(par1[6])
Label(root, text="  Halo (m): ",font=("Sans Bold", 8)).grid(row=14, column=4,sticky='w')
halo = DoubleVar()
Entry(root, width=8, textvariable=halo,font=("Sans Bold", 8)).grid(row=14, column=5,sticky='w')
halo.set(par2[6])
########
Label(root, text="Range x (m): ",font=("Sans Bold", 8)).grid(row=15, column=2,sticky='w')
rngxa = DoubleVar()
Entry(root, width=8, textvariable=rngxa,font=("Sans Bold", 8)).grid(row=15, column=3,sticky='w')
rngxa.set(par1[7])
Label(root, text="  Range  y (m): ",font=("Sans Bold", 8)).grid(row=15, column=4,sticky='w')
rngya = DoubleVar()
Entry(root, width=8, textvariable=rngya,font=("Sans Bold", 8)).grid(row=15, column=5,sticky='w')
rngya.set(par2[7])
#######
#-----------------------------------------------------------------------------
#######
nfontes = IntVar()
option = int(par1[11])
nfontes.set(option)
lname = [("Single Source"), ("Dual Source"), ("Triple Source"),]
def ShowChoice():
    print(nfontes.get())
for val, lname in enumerate(lname):
  Radiobutton(root,text=lname, variable=nfontes,
      command=ShowChoice,value=val+1,font=("Sans Bold", 7),fg = 'blue').grid(row =17+val, 
      column=2, sticky=W)
#########
#------------------------------------------------------------------
#########
ort1 = IntVar()
ort1.set(0)  
languages = [("Parallel"),("Orthogonal"),]

def ShowChoice():
    print(ort1.get())
for val, language in enumerate(languages):
    Radiobutton(root,text=language,padx=2,variable=ort1, command=ShowChoice,
    value=val,font=("Sans Bold", 8),fg = 'blue').grid(row =18+val, column=4,sticky=W)
#########

###_-------------------------------------------------------------------------------
#########
root1 = Frame(root)
tkvar = StringVar(root1)
choices = { 'ProvidedPolygon','CaioExpansion'}
tkvar.set('ProvidedPolygon') # set the default option 
popupMenu = OptionMenu(root, tkvar, *choices)
popupMenu.config(font=('Impact',7))
menu = popupMenu.nametowidget(popupMenu.menuname)
menu.configure(font=('Impact', 7))
popupMenu.grid(row = 15, column=0, sticky=W)
# on change dropdown value
def change_dropdown(*args):
    print( tkvar.get() )
# link function to change dropdown
tkvar.trace('w', change_dropdown)
#############

# BLOCO 3 ---------------------------------------------------------------------------
Label(root, text="_______________________").grid(row=20, column=2, sticky=W)
Label(root, text="Survey Parameters  ",font=("Sans Bold", 11)).grid(row=21, column=2, sticky=W)
#########
Label(root, text="Source speed (kts): ",font=("Sans Bold", 8)).grid(row=22, column=2,sticky='w')
velshot = DoubleVar()
Entry(root, width=8, textvariable=velshot,font=("Sans Bold", 8)).grid(row=22, column=3,sticky='w')
velshot.set(par1[12])
Label(root, text="   ROV speed (kts): ",font=("Sans Bold", 8)).grid(row=22, column=4,sticky='w')
velnode = DoubleVar()
Entry(root, width=8, textvariable=velnode,font=("Sans Bold", 8)).grid(row=22, column=5,sticky='w')
velnode.set("1.")
#########
Label(root, text="Line chg (Hours) : ",font=("Sans Bold", 8)).grid(row=23, column=2,sticky='w')
chglinetime = DoubleVar()
Entry(root, width=8, textvariable=chglinetime,font=("Sans Bold", 8)).grid(row=23, column=3,sticky='w')
chglinetime.set(par2[12])
Label(root, text="   Maxoffset (m): ",font=("Sans Bold", 8)).grid(row=23, column=4,sticky='w')
MaxOff = DoubleVar()
Entry(root, width=8, textvariable=MaxOff,font=("Sans Bold", 8)).grid(row=23, column=5,sticky='w')
MaxOff.set(par2[6])
########
Label(root, text="Lines before shot: ",font=("Sans Bold", 8)).grid(row=24, column=2,sticky='w')
PreNodeLines = DoubleVar()
Entry(root, width=8, textvariable=PreNodeLines,font=("Sans Bold", 8)).grid(row=24, column=3,sticky='w')
PreNodeLines.set("3")
Label(root, text="   ESPG : ",font=("Sans Bold", 8)).grid(row=24, column=4,sticky='w')
espg = StringVar()
Entry(root, width=10, textvariable=espg,font=("Sans Bold", 8)).grid(row=24, column=5,sticky='w')
espg.set(par2[9])
#########
Label(root, text="Project :     ",font=("Sans Bold", 8)).grid(row=25, column=2,sticky=W)
ProjName = StringVar()
Entry(root, width=10, textvariable=ProjName,font=("Sans Bold", 8)).grid(row=25, column=3,sticky='w')
ProjName.set(par1[8])
Label(root, text="   Client :     ",font=("Sans Bold", 8)).grid(row=25, column=4,sticky=W)
Co = StringVar()
Entry(root, width=10, textvariable=Co,font=("Sans Bold", 8)).grid(row=25, column=5,sticky='w')
Co.set(par2[8])
#########
Label(root, text="Option : ",font=("Sans Bold", 8)).grid(row=26, column=2,sticky=W)
Option = StringVar()
Entry(root, width=10, textvariable=Option,font=("Sans Bold", 8)).grid(row=26, column=3,sticky='w')
Option.set(par1[9])
########
Label(root, text="Vers: ",font=("Sans Bold", 8)).grid(row=27, column=2,sticky=W)
Version = StringVar()
Entry(root, width=10, textvariable=Version,font=("Sans Bold", 8)).grid(row=27, column=3,sticky='w')
Version.set(par1[10])
########
#FOCA!!!!
########
Label(root, text="  Record length (s)",font=("Sans Bold", 8)).grid(row=26, column=4,sticky=W)
rl = StringVar()
Entry(root, width=10, textvariable=rl,font=("Sans Bold", 8)).grid(row=26, column=5,sticky='w')
rl.set(par1[14])
########
Label(root, text="  Water depth (m) ",font=("Sans Bold", 8)).grid(row=27, column=4,sticky=W)
wd = StringVar()
Entry(root, width=10, textvariable=wd,font=("Sans Bold", 8)).grid(row=27, column=5,sticky='w')
wd.set(par2[14])
########

#---------------------------------------------NODES PLOT SELECT--------------------------------------------------------
########
var1a = IntVar()
Checkbutton(root, text=' Plot node polygon  ',font=("Sans Bold", 9), variable=var1a ).grid(row =3, column=0, sticky=W)
var1a.set("1")
var1b = IntVar()
Checkbutton(root, text=' Plot nodes  ',font=("Sans Bold", 9), variable=var1b ).grid(row =4, column=0, sticky=W)
var1b.set("1")
var1c = IntVar()
Checkbutton(root, text=' Plot node grid origin  ',font=("Sans Bold", 9), variable=var1c ).grid(row =5, column=0, sticky=W)
var1c.set("1")
##########
#---------------------------------------------GRID PLOT SELECT -------------------------------------------------------------
########
var2a = IntVar()
Checkbutton(root, text=' Plot shot polygon ',font=("Sans Bold", 9), variable=var2a ).grid(row =6, column=0,sticky=W)
var2a.set=("0")
var2b = IntVar()
Checkbutton(root, text=' Plot grid points  ',font=("Sans Bold", 9), variable=var2b ).grid(row =7, column=0, sticky=W)
var2b.set("0")
var2c = IntVar()
Checkbutton(root, text=' Plot grid origin  ',font=("Sans Bold", 9), variable=var2c ).grid(row =8, column=0, sticky=W)
var2c.set("0")
#########
#------------------Reading  Node polygon--------------
def rnodes():
 global xp,yp
 X=[]
 xp,yp=[],[]

 with open('pol2.txt','r') as f1:
     reader = csv.reader(f1, delimiter=' ')
     next(reader)
     for row in reader:
      xp.append(float(row[0]))
      yp.append(float(row[1]))

 for k in range(0,len(xp)):
      X.append([float(xp[k]),float(yp[k])])
 poly=Polygon(X)
 PO=Polyarea(xp,yp)
 ring = LinearRing(X)
 s=Polygon(ring)
 global NodeArea, flagpolinode

 NodeArea=PO.getarea()
 flagpolinode = 1
 print ('     ')
 print ('Node Poligons -------------------------------')
 print ('Node polygon - Polyarea (SQ Km)', PO.getarea())
# print ('Node polygon order clockwise?' , PO.getorder())
 print ('Node polygon (SQ Km)', s.area/1000000)
 print ('     ')
 
#------------------Node Grid Generation -----------------------------
 global x0,y0
 global XX,YY
 global NumberofNodes
 global NumberofNodeLines
 global LineNumber, NodeNumber , FNL , LNL, flaggridnode

 XX,YY=[],[]
 rangex=rngx.get()
 rangey=rngy.get()
 x0=origx.get()
 y0=origy.get()
 dx=nodex.get()
 dy=nodey.get()
 nx=int(rangex/dx) #+2
 ny=int(rangey/dy) #+2
 angle = anglex.get()
 angle1=angle
 if v.get() ==0:
   angle1+=30.
 stagger=0
 if v.get() == 1:
  stagger=1
 f = open('nodes.txt', 'w') 

 XX,YY=[],[]

 o1=ort.get()

 CQ=Grid(x0,y0,dx,dy,nx,ny,angle,angle1,stagger,o1)

 x= CQ.getarrx()
 y= CQ.getarry()
 nnx= CQ.getnnx() 
 nny= CQ.getnny()  

 f.write("%s\n" % 'x y s l')

 NumberofNodes=0
 NumberofNodeLines=0
 ntotal=len(x)

###
 a=PB(400,20)
 a.settitle("Nodes Computation")
 a.open()
 upt=0
 progress=1./ntotal
###

 LineNumber=[]
 ###NodeNumber=[]
 FNL=[]
 LNL=[]
 savenode =0
 for k in range(0,nny):
###
   a.update(upt)
###

   flagline = 0
   flagnode = 0

   for l in range(0,nnx):
     aa= poly.contains(Point([float(x[k][l]),float(y[k][l])])) ####2
     bb= ring.contains(Point([float(x[k][l]),float(y[k][l])]))  ### Inclui os nodes on the polygon boundary
     if aa or bb:
      NumberofNodes+=1     # count all nodes in and on the node polygon
      XX.append(float(x[k][l]))
      YY.append(float(y[k][l]))

      aax=x[k][l]
      aay=y[k][l]
      if flagnode==0:
         LineNumber.append(k)
         FNL.append(l)
      if flagline==0:
        if flagnode==0:    #skiping the 1st node - no last node saved yet
          if  savenode!=0:
             LNL.append(savenode)
      f.write("%7.2f %7.2f %i %i\n" % (aax,aay,k,l))
      flagnode = 1   # Stops in the 1st node of the line
      savenode = l   #  Saving the last node  
   flagline = 1      # Stops  in the end node  of each line
   upt=upt+progress
 flaggridnode=1
 LNL.append(savenode)
 f1.close()
 f.close()

###
 a.close()
###

#------------------Shot Grid Generation -------------------------------------------
#
def rshots():

 X3=[]

 global x0a,y0a,x0b,y0b
 global XXgrid,YYgrid
 global xp3,yp3
 global NumberofSailPoints
 global NumberofSailLines 
 global ShotArea
 global nsources,nfontes,dxa,dya
 global NumberofShotPoints,NumberofShotLines,AvSailKm_1,AvShotKm_1,TotalShootTimeHours,TotalShootTimeDays
 global ShotsPerKm2,LinearSailKm,LinearShotKm
 global flagpolishot

 xp3,yp3=[],[]

# Check which source polygon to be used

 if tkvar.get()== 'ProvidedPolygon' :
  e=open('polshot.txt','w')
  with open('pol3.txt','r') as f2:
     reader = csv.reader(f2, delimiter=' ')
     next(reader)
     for row in reader:
      xp3.append(float(row[0]))  
      yp3.append(float(row[1]))
  e.write("%s %s\n" % ("x","y"))
  for i in range (0,len(xp3)):
   e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

 if tkvar.get()== 'CaioExpansion':
  e=open('polshot.txt','w')
  C=Poly(xp,yp,halo.get())
  xp3=C.getpxe()
  yp3=C.getpye()
  e.write("%s %s\n" % ("x","y"))
  for i in range (0,len(xp3)):
   e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

# if tkvar.get()=='CaioExpRounded':  
#    e=open('polshot.txt','w')
#    C=Poly(xp,yp,halo.get())
#    xp3=C.getpxe()
#    yp3=C.getpye()
#    C1=Polyexp(xp3,yp3,halo.get())
#    xp3=C1.getpex()
#    yp3=C1.getpey()
#    e.write("%s %s\n" % ("x","y"))
#    for i in range (0,len(xp3)):
#      e.write("%7.2f %7.2f\n" % (float(xp3[i]),float(yp3[i])))

 for k in range(0,len(xp3)):
      X3.append([float(xp3[k]),float(yp3[k])])
 polyshot = Polygon(X3)
 ring = LinearRing(X3)
 s = Polygon(ring)
 ShotArea = s.area/1000000
 print ('     ')
 print ('Shot poligons -------------------------------')
 print ('Shot polygon (SQ Km)', s.area/1000000)
 flagpolishot=1

#------------------Sail(Shot) Line Grid ------------------
#  Grid is based on shot arrays  configuration 
#
 LLgrid,PPgrid=[],[]
 XXgrid,YYgrid=[],[]
 LINgrid,PTNgrid=[],[]

 rangexa=rngxa.get()
 rangeya=rngya.get()
 x0a=origxa.get()
 y0a=origya.get()
 dxa=shotx.get()
 dya=shoty.get()
 nsources = nfontes.get()        #Nsources.get()
 anglea = anglexa.get()
 angleb=anglea  
 o1=ort1.get()
 ang = anglea*np.pi/180.
 stagger = 0
 nxa=int(rangexa/dxa)
 nya=int(rangeya/dya)

 if nsources==1:
    dxb =dxa
    dyb=dya
 if nsources==2:
    dxb=dxa/2
    dyb=dya/2
 if nsources==3:             # TRIPLE SOURCE 
    dxb=dxa/2
    dyb=dya
    dxb=dxb*nsources
 nxb=int(rangexa/dxb)
 nyb=int(rangeya/dyb)

 CQgrid=Grid(x0a,y0a,dxb,dyb,nxb,nyb,anglea,angleb,stagger,o1)

 nnx=    CQgrid.getnnx()
 nny=    CQgrid.getnny()
 xgrid=  CQgrid.getarrx()
 ygrid=  CQgrid.getarry()

 grid = open('grid.txt', 'w')
 sht =   open('shots.txt', 'w')
 sail =  open('sail.txt', 'w')
 grid.write("%s\n" % 'x y l s')
 sht.write("%s\n" % 'x y l s')
 sail.write("%s\n" % 'x y l s')

 ntotal=len(xgrid)
 a=PB(400,20)
 a.settitle("Grid lines Computation")
 a.open()
 upt=0
 progress=1./ntotal

 SailLineInterval = dya    # Adjascent arrays separation. 
 SailPointInterval = dyb   # pop interval
 FirstSailLine = 1
 FirstSailLineNumber = 1000
 SailLineIntervalIdx = 1 #int(dya/dyb)
 SailPointIntervalIdx = 1

 for GridLine in range(0,nny):
    a.update(upt)
    for GridPoint in range(0,nnx):
          XXgrid.append(float(xgrid[GridLine][GridPoint]))
          YYgrid.append(float(ygrid[GridLine][GridPoint]))
          LLgrid.append([GridLine,GridPoint])
          LINgrid.append([GridLine])
          PTNgrid.append([GridPoint])
          grid.write("%7.2f %7.2f %2i %2i\n" % (xgrid[GridLine][GridPoint],ygrid[GridLine][GridPoint],GridLine,GridPoint))
    upt=upt+progress
 a.close()

 A=LLgrid[-1]
 B=LLgrid[0]
 ny= A[0]-B[0]+1
 nx= A[1]-B[1]+1
 print ("nx,ny",nnx,nny,nx,ny,A[0],B[0],A[1],B[1],len(A),len(B))
 
 GRIDXX=np.reshape((np.asarray(XXgrid)),(ny,nx))
 GRIDYY=np.reshape((np.asarray(YYgrid)),(ny,nx))
 GRIDLN=np.reshape((np.asarray(LINgrid)),(ny,nx))
 GRIDPT=np.reshape((np.asarray(PTNgrid)),(ny,nx))
 print("GRIDXX,GRIDYY,GRIDLN,GRIDPT", GRIDXX.shape,GRIDYY.shape,GRIDLN.shape,GRIDPT.shape)
 
 print  ("GRID VALUES", GRIDLN[0][0],GRIDLN[-1][-1])

 ntotal=len(XXgrid)
 a=PB(400,20)
 a.settitle("Sail lines Computation")
 a.open()
 upt=0
 progress=1./ny

 adv=int(nsources)
 if nsources==1:
     interv = int(dya/dyb)
 if nsources==2: 
     interv =int(2*adv)
 if nsources==3:
     interv=2
     adv=0

 sailint = 1
 sailflag= 0

 for jj in range(0,ny-1,interv):
    a.update(upt)
    for ii in  range(0,nx-interv,interv):
     InsidePoints  = polyshot.contains(Point([float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii])]))
#     OutsidePoints = ring.contains(Point([float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii])]))
     if InsidePoints: # or OutsidePoints:

      if nsources ==2:
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj][ii]),(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        sht.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+adv][ii+adv]),(GRIDYY[jj+adv][ii+adv]),GRIDLN[jj+adv][ii+adv],GRIDPT[jj+adv][ii+adv]))
        sail.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+1][ii+1]),(GRIDYY[jj+1][ii+1]),GRIDLN[jj+1][ii+1],GRIDPT[jj+1][ii+1]))
      if nsources ==1:
        sht.write("%7.2f %7.2f %2i %2i\n" % (float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
        sail.write("%7.2f %7.2f %2i %2i\n" % (float(GRIDXX[jj][ii]),float(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
      if nsources ==3: 
        sht.write("%7.2f %7.2f %2.1f %2.1f\n" % ((GRIDXX[jj][ii]),(GRIDYY[jj][ii]),GRIDLN[jj][ii],GRIDPT[jj][ii]))
#        sht.write("%7.2f %7.2f %2.1f %2.1f\n" % ((GRIDXX[jj+adv][ii+adv]),(GRIDYY[jj+adv][ii+adv]),GRIDLN[jj+adv][ii+adv],GRIDPT[jj+adv][ii+adv]))
        sht.write("%7.2f %7.2f %2.1f %2.1f\n" % ((GRIDXX[jj+adv+1][ii+adv+1]),(GRIDYY[jj+adv+1][ii+adv+1]),GRIDLN[jj+adv+1][ii+adv+1],GRIDPT[jj+adv+1][ii+adv+1]))

# -------- Loop for sailines 

     if nsources == 3 and (jj+sailint) <ny-1:
        DentroPoints  = polyshot.contains(Point([float(GRIDXX[jj+sailint][ii]),float(GRIDYY[jj+sailint][ii])]))
        OutsidePoints = ring.contains(Point([float(GRIDXX[jj+sailint][ii]),float(GRIDYY[jj+sailint][ii])]))
        if DentroPoints or OutsidePoints:
          inc = sailint%2
          sail.write("%7.2f %7.2f %2i %2i\n" % ((GRIDXX[jj+sailint][ii+inc]),(GRIDYY[jj+sailint][ii+inc]),GRIDLN[jj+sailint][ii+inc],GRIDPT[jj+sailint][ii+inc]))
          sailflag = 1
    if sailflag == 1 :
      sailint=sailint+1
    upt=upt+progress
 a.close()

 upt=upt+progress
 a.close()
 grid.close()
 sail.close()
 sht.close()
# planout()
 planout(ProjName.get(),Co.get(),Option.get(),Version.get(),espg.get(),
     nodex.get(),nodey.get(), velnode.get() ,v.get(),anglex.get() ,
     ort.get(),   nfontes.get(), shotx.get(),shoty.get() ,
         anglexa.get(),  ort1.get(),velshot.get(),MaxOff.get(),
         chglinetime.get(),
         LNL,FNL,LineNumber,NodeArea,ShotArea,xp,yp,xp3,yp3)   
#--------------------------------------------------------------------------------------------------
#-----------------Class  bar (Progress bar)--------------------
class PB:

    def settitle(self, title):
        self.__root.title(title)
    # Create Progress Bar
    def __init__(self, width, height):
#        self.__root = tk.Toplevel()
        self.__root = tkinter.Tk() #updated by Petr
        self.__root.resizable(False, False)
        self.__root.title('Wait please...')
        self.__canvas = tkinter.Canvas(self.__root, width=width, height=height)
        self.__canvas.grid()
        self.__width = width
        self.__height = height

    # Open Progress Bar
    def open(self):
        self.__root.deiconify()
        self.__root.focus_set()
        #self.__root.update()

    # Close Progress Bar
    def close(self):
        self.__root.withdraw()

    # Update Progress Bar
    def update(self, ratio):
        self.__canvas.delete(tkinter.ALL)
        self.__canvas.create_rectangle(0, 0, self.__width * ratio, \
                                       self.__height, fill='blue')
        self.__root.update()
        self.__root.focus_set()

#------------------- Call Fold ------------------------------
def foldm():
 os.system('./fold')
#------------------- Call Planilha----------------------------
def planilha():
 os.system('libreoffice Spreadsheet.xls&')
#------------------- Call Map PYQGIS----------------------------
def map():
 os.system('./map&')
#---------------------Call Pdiagram --------------------------
def pdiagram():
 diagram(nfontes.get(),shotx.get(),shoty.get(),velshot.get(),wd.get())

#------------------Plot-----------------------------------
def plot():


 if flaggridnode >0:
     fig, ax = plt.subplots(figsize=(8, 8))
     ax.set_title('OBN survey area')

     if var2a.get() == 1:
       ax.plot(xp3, yp3, color='blue', alpha=0.9,
        linewidth=2, solid_capstyle='round', zorder=1)


     if var1a.get() == 1:
       ax.plot(xp, yp, color='red', alpha=0.9,
         linewidth=2, solid_capstyle='round', zorder=1)

     if var1b.get() == 1:
       ax.scatter(XX,YY,s=3.5,color='red',alpha=.9)

     if var2b.get() == 1:
       ax.scatter(XXgrid,YYgrid,s=.3,color='black',alpha=.2)

## if var3b.get() == 1:
## ax.scatter(XXsail,YYsail,s=.3,color='green',alpha=.4)

     if var1c.get() == 1:
       ax.scatter(x0,y0,s=24.5,color='red',marker='s',alpha=.9)

     if var2c.get() == 1:
       ax.scatter(x0a,y0a,s=24.5,color='blue',marker='s',alpha=.9)

 else:
    print ("PLEASSE RUN THE NODES COMUTAION")
    messagebox.showwarning("Please run:", "NODES COMPUTATION") 
 
# if var3c.get() == 1:
#   ax.scatter(x0a,y0a,s=24.5,color='black',marker='s',alpha=.9)

 plt.show()


#-----------------------------------------------------------------------

Button(root,text="Nodes Computation",font=("Sans Bold", 9), command=rnodes).grid(row=9, column=5,sticky="w")

Button(root,text="Full Computation",font=("Sans Bold", 9), command=rshots).grid(row=20, column=5,sticky="w")

Button(root,text="PLOT DIAGRAM ",font=("Sans Bold", 7), command=pdiagram).grid(row=13, column=0, sticky="w")

Button(root,text="PLOT GRID      ",font=("Sans Bold", 7), command=plot).grid(row=11, column=0,sticky="w")

Button(root,text="EXIT",font=("Sans Bold", 10), command=exit).grid(row=28, column=5,sticky=E )

Button(root,text="MAP PYQGIS ",font=("Sans Bold", 7), command=map).grid(row=19, column=0, sticky="w")

Button(root,text="SpreadSheet",font=("Sans Bold", 7), command=planilha).grid(row=21, column=0,sticky="w")

Button(root,text="FOLD           ",font=("Sans Bold", 7), command=foldm).grid(row=23, column=0,sticky="w")

root.mainloop()

